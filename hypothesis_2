```{r}
# The merged_data tibble is used to generate a new dataset.

mutlivariate_variables <- c("Antibiotics","consent_age","Gender","d__Bacteria;p__Actinobacteriota;c__Actinomycetia;o__Actinomycetales;f__Bifidobacteriaceae;g__Bifidobacterium","d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Oscillospirales;f__Ruminococcaceae;g__Faecalibacterium","d__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Lactobacillus" )

dataset_multivariate <- merged_data %>% select(Sample, Subject, Disease_State, mutlivariate_variables)

#mutating the tibble for doing multivariate analysis
dataset_multivariate <- dataset_multivariate %>% 
  mutate(Antibiotics = ifelse(Antibiotics == "Yes", 1,0),
         Gender = ifelse(Gender == "Female", 1,0))

# Convert Disease_State to a factor
dataset_multivariate$Disease_State <- factor(dataset_multivariate$Disease_State, levels = c("non-IBD", "IBD"))

#renaming the colum names of bacteria to make it easier for calling up  
dataset_multivariate <- dataset_multivariate %>%
  rename(Bifidobacterium = "d__Bacteria;p__Actinobacteriota;c__Actinomycetia;o__Actinomycetales;f__Bifidobacteriaceae;g__Bifidobacterium", Faecalibacterium = "d__Bacteria;p__Firmicutes_A;c__Clostridia;o__Oscillospirales;f__Ruminococcaceae;g__Faecalibacterium", Lactobacillus = "d__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Lactobacillus"  )


# Define the winsorizing function
winsorize <- function(x, lower_quantile = 0.01, upper_quantile = 0.99) {
  lower_bound <- quantile(x, lower_quantile)
  upper_bound <- quantile(x, upper_quantile)
  x[x < lower_bound] <- lower_bound
  x[x > upper_bound] <- upper_bound
  return(x)
}

# Apply winsorizing to the bacterial counts
dataset_multivariate <- dataset_multivariate %>%
  mutate(Bifidobacterium = winsorize(Bifidobacterium),
         Faecalibacterium = winsorize(Faecalibacterium),
         Lactobacillus = winsorize(Lactobacillus))

#log transformation of bacterial counts
dataset_multivariate <- dataset_multivariate %>%
  mutate(Bifidobacterium = log(Bifidobacterium + 1),
         Faecalibacterium = log(Faecalibacterium + 1),
         Lactobacillus = log(Lactobacillus + 1))

#removing NA-values  
dataset_multivariate <- dataset_multivariate %>% filter(!is.na(consent_age) & !is.na(Bifidobacterium) & !is.na(Faecalibacterium) & !is.na(Lactobacillus) & !is.na(Gender) & !is.na(Antibiotics))
```

```{r}
#making a histogram for log-transformed data of bacteria
ggplot(dataset_multivariate, aes(x = Bifidobacterium)) +
  geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
  labs(title = "Log-transformed Bifidobacterium Counts", x = "Log-transformed Counts", y = "Frequency") +
  theme_minimal()

ggplot(dataset_multivariate, aes(x = Faecalibacterium)) +
  geom_histogram(bins = 30, color = "black", fill = "skyblue", alpha = 0.7) +
  labs(title = "Histogram of log transformed Faecalibacterium counts",
       x = "Log(count + 1)", y = "frequency") +
  theme_minimal()

ggplot(dataset_multivariate, aes(x = Lactobacillus)) +
  geom_histogram(bins = 30, color = "black", fill = "skyblue", alpha = 0.7) +
  labs(title = "Histogram of log transformed Lactobacillus counts",
       x = "Log(count + 1)", y = "frequency") +
  theme_minimal()

# making qq-plots for the log-transformed data
qqPlot(dataset_multivariate$Bifidobacterium, 
       main = "Q-Q Plot: log transformed Bifidobacterium")

qqPlot(dataset_multivariate$Faecalibacterium, 
       main = "Q-Q Plot: log transformed Faecalibacterium")

qqPlot(dataset_multivariate$Lactobacillus, 
       main = "Q-Q Plot: log transformed Lactobacillus")
```
```{r}
# Fit the model
model <- glmer(Disease_State ~ Gender + Bifidobacterium + Faecalibacterium + Lactobacillus +  (1 | Subject), data = dataset_multivariate, family = binomial, control = glmerControl(optCtrl = list(maxfun = 500000)))

# Print the summary of the model
summary(model)

# Melt the dataset for easier plotting with ggplot2
melted_df <- melt(dataset_multivariate, id.vars = "Disease_State", 
                  measure.vars = c("Bifidobacterium", "Faecalibacterium", "Lactobacillus"),
                  variable.name = "Bacteria", value.name = "Count")

# Create the boxplot for protective bacterial counts and disease state
ggplot(melted_df, aes(x = Disease_State, y = Count, fill = Bacteria)) +
  geom_boxplot() +
  labs(title = "Bacterial Counts by Disease State", x = "Disease State", y = "Count") +
  theme_minimal()

# Bar plot for Gender and Disease State
ggplot(dataset_multivariate, aes(x = Gender, fill = Disease_State)) +
  geom_bar(position = "dodge") +
  labs(title = "Effect of Gender on Disease State", x = "Gender", y = "Count")
```
