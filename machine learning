#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

filtered_data = pd.read_csv("filtered_data.csv", low_memory = False)
filtered_data.columns
filtered_data.head(50)


# In[2]:


y = filtered_data.Disease_State
Disease_features = ['fecalcal', 'Protective_Bacteria_Total', 'smoking status', 'BMI_at_baseline', 'Gender', 'Height_at_baseline', 'Weight_at_baseline', 'Antibiotics']
X = filtered_data[Disease_features]
X.describe()


# In[3]:


X.loc[:, 'smoking status'] = X['smoking status'].fillna('Unknown')
X = X.fillna(0)
X.loc[:,'smoking status'] = label_encoder.fit_transform(X['smoking status'])
X.loc[:,'Gender'] = label_encoder.fit_transform(X['Gender'])
X.loc[:,'Antibiotics'] = label_encoder.fit_transform(X['Antibiotics'])
y = label_encoder.fit_transform(y)
X.head(20)


# In[4]:


from sklearn.tree import DecisionTreeClassifier
IBD_model = DecisionTreeClassifier(random_state=1)
IBD_model.fit(X, y)


# In[5]:


print("Making predictions for the following 40 patients:")
print(X.head())
print("The predictions are")
print(IBD_model.predict(X.head()))


# In[6]:


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)
IBD_model.fit(X_train, y_train)
predictions = IBD_model.predict(X_test)
predictions


# In[7]:


from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, predictions)
print("Mean Squared Error:", mse)

import numpy as np
baseline_prediction = np.mean(y_test)
baseline_mse = np.mean((y_test - baseline_prediction) ** 2)
print("Baseline MSE:", baseline_mse)


# Our model's MSE is a fraction better than the baseline, which means it is not performing that well. It should be significantly outperforming it to be good. 

# In[8]:


from sklearn.metrics import r2_score
r2 = r2_score(y_test, predictions)
print("R² Score:", r2)


# Goodness of fit not good

# In[9]:


from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, predictions.round())
print("Accuracy:", accuracy)


# The fraction of correctly predicted labels.

# In[10]:


train_predictions = IBD_model.predict(X_train)
test_predictions = IBD_model.predict(X_test)

from sklearn.metrics import mean_squared_error
train_mse = mean_squared_error(y_train, train_predictions)
test_mse = mean_squared_error(y_test, test_predictions)

print("Training MSE:", train_mse)
print("Testing MSE:", test_mse)


# This tells us that the model is capable of correctly prodicting everything in the training dataset, but was not able to do the same in the test dataset. This is an indication of overfitting and working from memory.

# In[11]:


from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
cm = confusion_matrix(y_test, predictions.round())
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()


# True vs. predicted labels.

# In[12]:


import matplotlib.pyplot as plt
feature_importances = IBD_model.feature_importances_
plt.bar(Disease_features, feature_importances)
plt.xlabel('Features')
plt.xticks(rotation=45)
plt.ylabel('Importance')
plt.title('Feature Importance')
plt.show()


# In[13]:


IBD_model = DecisionTreeClassifier(max_depth=5, random_state=1)
IBD_model.fit(X, y)


# In[14]:


print("Making predictions for the following 40 patients:")
print(X.head())
print("The predictions are")
print(IBD_model.predict(X.head()))


# In[15]:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)
IBD_model.fit(X_train, y_train)
predictions = IBD_model.predict(X_test)
predictions


# In[16]:


mse = mean_squared_error(y_test, predictions)
print("Mean Squared Error:", mse)
baseline_prediction = np.mean(y_test)
baseline_mse = np.mean((y_test - baseline_prediction) ** 2)
print("Baseline MSE:", baseline_mse)


# In[17]:


accuracy = accuracy_score(y_test, predictions.round())
print("Accuracy:", accuracy)


# In[18]:


r2 = r2_score(y_test, predictions)
print("R² Score:", r2)


# In[19]:


train_predictions = IBD_model.predict(X_train)
test_predictions = IBD_model.predict(X_test)

train_mse = mean_squared_error(y_train, train_predictions)
test_mse = mean_squared_error(y_test, test_predictions)

print("Training MSE:", train_mse)
print("Testing MSE:", test_mse)


# In[20]:


cm = confusion_matrix(y_test, predictions.round())
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()


# In[21]:


feature_importances = IBD_model.feature_importances_
plt.bar(Disease_features, feature_importances)
plt.xlabel('Features')
plt.xticks(rotation=45)
plt.ylabel('Importance')
plt.title('Feature Importance')
plt.show()


# In[27]:


from sklearn.tree import plot_tree
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

plt.figure(figsize=(20, 10))
plot_tree(
    IBD_model,
    feature_names=Disease_features,
    class_names=[str(cls) for cls in label_encoder.classes_],
    filled=True,
    rounded=True,
    fontsize=10
)

plt.show()

